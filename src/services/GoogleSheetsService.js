import { MVP_CONFIG } from '../config/AppConfig';
import { GOOGLE_SHEETS_CONFIG } from '../config/GoogleSheetsConfig';
import GoogleOAuthService from './GoogleOAuthService';
import StorageService from './StorageService';

class GoogleSheetsService {
  constructor() {
    this.accessToken = null;
    this.refreshToken = null;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
  async saveSheetUrl(url) {
    try {
      const result = await StorageService.saveSheetUrl(url);
      if (result.success) {
        console.log('‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return true;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
  async getSheetUrl() {
    try {
      const result = await StorageService.getSheetUrl();
      if (result.success) {
        return result.url;
      } else {
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', error);
      return null;
    }
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth2
  async authenticate() {
    try {
      console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤)
      const authResult = await GoogleOAuthService.authenticate();
      
      if (authResult.success) {
        console.log('‚úÖ OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        return {
          success: false,
          error: authResult.error,
          message: authResult.message,
          needsVerification: authResult.needsVerification
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: error.message,
        message: error.message
      };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
  extractSheetId(url) {
    const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    return match ? match[1] : null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
  async getSheetData(sheetUrl, range = 'A1:Z1000') {
    try {
      const sheetId = this.extractSheetId(sheetUrl);
      if (!sheetId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–∞–±–ª–∏—Ü—ã');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSV –¥–∞–Ω–Ω—ã—Ö
      const publicUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&range=${range}`;
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑: ${sheetUrl}`);
      
      const response = await fetch(publicUrl);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const csvText = await response.text();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${csvText.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö`);
      
      // –ü–∞—Ä—Å–∏–º CSV –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
      const lines = csvText.split('\n');
      const data = lines.map(line => {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫)
        return line.split(',').map(cell => cell.trim().replace(/^"|"$/g, ''));
      });

      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
  parseWorkoutPlan(rawData) {
    if (!rawData || rawData.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –í–∏–∫—Ç–æ—Ä–∞
    const workoutPlan = {};
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const headerRow = rawData[0];
    const dayColumns = this.extractDayColumns(headerRow);
    
    // –ü–∞—Ä—Å–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    dayColumns.forEach(({ dayName, startCol, endCol }) => {
      workoutPlan[dayName] = this.parseExercisesForDay(rawData, startCol, endCol, dayName);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.weightPositions = this.extractWeightPositions(rawData, dayColumns);

    return workoutPlan;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  extractDayColumns(headerRow) {
    const dayColumns = [];
    const dayNames = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    dayNames.forEach(dayName => {
      const dayIndex = headerRow.findIndex(cell => 
        cell && cell.toLowerCase().includes(dayName.toLowerCase())
      );
      
      if (dayIndex !== -1) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        let endCol = dayIndex + 1;
        while (endCol < headerRow.length && 
               (headerRow[endCol] === '' || headerRow[endCol] === undefined)) {
          endCol++;
        }
        
        dayColumns.push({
          dayName: this.normalizeDayName(headerRow[dayIndex]),
          startCol: dayIndex,
          endCol: endCol
        });
      }
    });
    
    return dayColumns;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è
  normalizeDayName(dayText) {
    const dayNames = {
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤—Ç–æ—Ä–Ω–∏–∫': '–í—Ç–æ—Ä–Ω–∏–∫', 
      '—Å—Ä–µ–¥–∞': '–°—Ä–µ–¥–∞',
      '—á–µ—Ç–≤–µ—Ä–≥': '–ß–µ—Ç–≤–µ—Ä–≥',
      '–ø—è—Ç–Ω–∏—Ü–∞': '–ü—è—Ç–Ω–∏—Ü–∞',
      '—Å—É–±–±–æ—Ç–∞': '–°—É–±–±–æ—Ç–∞',
      '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };
    
    const lowerText = dayText.toLowerCase();
    for (const [key, value] of Object.entries(dayNames)) {
      if (lowerText.includes(key)) {
        return value;
      }
    }
    return dayText;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
  parseExercisesForDay(rawData, startCol, endCol, dayName) {
    const exercises = [];
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    for (let rowIndex = 1; rowIndex < rawData.length; rowIndex++) {
      const row = rawData[rowIndex];
      if (!row || row.length === 0) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
      const firstCell = row[0] || '';
      if (firstCell.toLowerCase().includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')) {
        const exerciseData = this.parseExerciseRow(row, startCol, endCol, rawData, rowIndex, dayName);
        if (exerciseData) {
          exercises.push(exerciseData);
        }
      }
    }
    
    return exercises;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  parseExerciseRow(row, startCol, endCol, allData, rowIndex, dayName) {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    const exerciseName = row[startCol] || '';
    if (!exerciseName || exerciseName.toLowerCase().includes('–æ—Ç–¥—ã—Ö–∞–µ–º')) {
      return null;
    }
    
    // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const exerciseData = {
      name: exerciseName.trim(),
      group: '',
      sets: 4, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 –ø–æ–¥—Ö–æ–¥–∞
      reps: '',
      weight: '',
      rest: '',
      specialty: '',
      videoUrl: '',
      comment: '',
      completed: false,
      dayName: dayName,
      exerciseRowIndex: rowIndex
    };
    
    // –ò—â–µ–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
    for (let i = rowIndex - 5; i <= rowIndex + 5; i++) {
      if (i >= 0 && i < allData.length) {
        const checkRow = allData[i];
        if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–≥—Ä—É–ø–ø–∞')) {
          exerciseData.group = checkRow[startCol] || '';
          break;
        }
      }
    }
    
    // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–ø–æ–≤—Ç–æ—Ä—ã')) {
        exerciseData.reps = checkRow[startCol] || '';
        break;
      }
    }
    
    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('—Å—Å—ã–ª–∫–∞')) {
        exerciseData.videoUrl = checkRow[startCol] || '';
        break;
      }
    }
    
    // –ò—â–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å')) {
        exerciseData.specialty = checkRow[startCol] || '';
        break;
      }
    }
    
    return exerciseData;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å—Ç—Ä–æ–∫ —Å –≤–µ—Å–æ–º
  extractWeightPositions(rawData, dayColumns) {
    const weightPositions = {};
    
    // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ—Å–æ–º
    for (let rowIndex = 0; rowIndex < rawData.length; rowIndex++) {
      const row = rawData[rowIndex];
      if (!row || row.length === 0) continue;
      
      const firstCell = row[0] || '';
      if (firstCell.toLowerCase().includes('–≤–µ—Å')) {
        // –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –≤–µ—Å–æ–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        const exerciseName = this.findExerciseForWeightRow(rawData, rowIndex);
        
        if (exerciseName) {
          dayColumns.forEach(({ dayName, startCol, endCol }) => {
            if (!weightPositions[exerciseName]) {
              weightPositions[exerciseName] = {};
            }
            
            weightPositions[exerciseName][dayName] = {
              row: rowIndex + 1, // +1 –¥–ª—è Google Sheets (1-based)
              startCol: startCol + 1, // +1 –¥–ª—è Google Sheets (1-based)
              endCol: endCol + 1,
              dayStartCol: startCol,
              dayEndCol: endCol
            };
          });
        }
      }
    }
    
    return weightPositions;
  }

  // –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ—Å–æ–º
  findExerciseForWeightRow(rawData, weightRowIndex) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã—à–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ—Å–æ–º
    for (let i = weightRowIndex - 1; i >= Math.max(0, weightRowIndex - 10); i--) {
      const row = rawData[i];
      if (!row || row.length === 0) continue;
      
      const firstCell = row[0] || '';
      if (firstCell.toLowerCase().includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')) {
        // –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –¥–Ω—è
        const dayNames = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
        
        for (const dayName of dayNames) {
          const dayIndex = rawData[0].findIndex(cell => 
            cell && cell.toLowerCase().includes(dayName.toLowerCase())
          );
          
          if (dayIndex !== -1 && row[dayIndex]) {
            return row[dayIndex].trim();
          }
        }
      }
    }
    
    return null;
  }

  // –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
  async writeProgress(sheetUrl, progressData) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
      if (sheetUrl) {
        await this.saveSheetUrl(sheetUrl);
      }
      
      const sheetId = this.extractSheetId(sheetUrl);
      if (!sheetId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–∞–±–ª–∏—Ü—ã');
      }

      console.log('üìä –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Google Sheets:', sheetId);
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      const authResult = await this.authenticate();
      
      // –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (!authResult || (typeof authResult === 'object' && !authResult.success)) {
        return {
          success: false,
          error: typeof authResult === 'object' ? authResult.error : 'auth_failed',
          message: typeof authResult === 'object' ? authResult.message : '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
          needsVerification: typeof authResult === 'object' ? authResult.needsVerification : false
        };
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–µ—Å–æ–≤
      if (!this.weightPositions) {
        throw new Error('–ü–æ–∑–∏—Ü–∏–∏ –≤–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
      }

      const exerciseName = progressData.exercise.name;
      const dayName = progressData.workout.day;
      
      if (!this.weightPositions[exerciseName] || !this.weightPositions[exerciseName][dayName]) {
        throw new Error(`–ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è "${exerciseName}" –≤ –¥–µ–Ω—å "${dayName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }

      const weightPosition = this.weightPositions[exerciseName][dayName];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–µ—Å–æ–≤
      const weightUpdates = [];
      progressData.sets.forEach((set, setIndex) => {
        if (set.completed && set.weight) {
          const colIndex = weightPosition.startCol + setIndex;
          if (colIndex <= weightPosition.endCol) {
            weightUpdates.push({
              row: weightPosition.row,
              col: colIndex,
              value: set.weight,
              exercise: exerciseName,
              set: setIndex + 1,
              day: dayName,
              cellAddress: this.getCellAddress(weightPosition.row, colIndex)
            });
          }
        }
      });

      if (weightUpdates.length === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Å –≤–µ—Å–∞–º–∏
      const result = await this.updateWeightCells(sheetId, weightUpdates);
      
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
  findWeightPositions(tableData, progressData) {
    const positions = [];
    const exerciseName = progressData.exercise.name;
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ—Å–æ–º
    for (let rowIndex = 0; rowIndex < tableData.length; rowIndex++) {
      const row = tableData[rowIndex];
      if (!row || row.length === 0) continue;
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const exerciseRow = row.find(cell => 
        cell && cell.toLowerCase().includes(exerciseName.toLowerCase())
      );
      
      if (exerciseRow) {
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Å–æ–º (–æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
        for (let weightRowIndex = rowIndex + 1; weightRowIndex < Math.min(rowIndex + 10, tableData.length); weightRowIndex++) {
          const weightRow = tableData[weightRowIndex];
          if (weightRow && weightRow[0] && weightRow[0].toLowerCase().includes('–≤–µ—Å')) {
            // –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –≤–µ—Å–æ–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
            const dayColumns = this.getDayColumnsForExercise(tableData, rowIndex);
            
            dayColumns.forEach(({ dayName, startCol, endCol }) => {
              // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
              progressData.sets.forEach((set, setIndex) => {
                if (set.completed && set.weight) {
                  const colIndex = startCol + setIndex;
                  if (colIndex < endCol) {
                    positions.push({
                      row: weightRowIndex + 1, // +1 –¥–ª—è Google Sheets (1-based)
                      col: colIndex + 1, // +1 –¥–ª—è Google Sheets (1-based)
                      value: set.weight,
                      exercise: exerciseName,
                      set: setIndex + 1,
                      day: dayName
                    });
                  }
                }
              });
            });
            break;
          }
        }
      }
    }
    
    return positions;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–Ω—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  getDayColumnsForExercise(tableData, exerciseRowIndex) {
    const dayColumns = [];
    const headerRow = tableData[0];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const dayNames = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    dayNames.forEach(dayName => {
      const dayIndex = headerRow.findIndex(cell => 
        cell && cell.toLowerCase().includes(dayName.toLowerCase())
      );
      
      if (dayIndex !== -1) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        let endCol = dayIndex + 1;
        while (endCol < headerRow.length && 
               (headerRow[endCol] === '' || headerRow[endCol] === undefined)) {
          endCol++;
        }
        
        dayColumns.push({
          dayName: this.normalizeDayName(headerRow[dayIndex]),
          startCol: dayIndex,
          endCol: endCol
        });
      }
    });
    
    return dayColumns;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ —Å –≤–µ—Å–∞–º–∏ —á–µ—Ä–µ–∑ Google Sheets API
  async updateWeightCells(sheetId, positions) {
    try {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ —Å –≤–µ—Å–∞–º–∏:', positions);
      
      // –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Sheets API
      const apiResult = await this.updateCellsViaAPI(sheetId, positions);
      
      if (apiResult.success) {
        console.log('‚úÖ –Ø—á–µ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API');
        return {
          success: true,
          message: `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${positions.length} —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ`,
          positions: positions,
          apiResponse: apiResult.data
        };
      } else {
        throw new Error(apiResult.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫:', error);
      throw error;
    }
  }

  // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Google Sheets API —Å OAuth2
  async updateCellsViaAPI(sheetId, positions) {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ Google Sheets —Å OAuth2...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      const accessToken = await GoogleOAuthService.getValidToken();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
      const updatePromises = positions.map(async (pos) => {
        const cellAddress = this.getCellAddress(pos.row, pos.col);
        const updateUrl = `${GOOGLE_SHEETS_CONFIG.BASE_URL}/${sheetId}/values/${cellAddress}:update?valueInputOption=RAW`;
        
        const response = await fetch(updateUrl, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`
          },
          body: JSON.stringify({
            values: [[pos.value]]
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellAddress} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${pos.value}`);
          return { success: true, cell: cellAddress, value: pos.value };
        } else {
          const errorText = await response.text();
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${cellAddress}:`, response.status, errorText);
          return { success: false, cell: cellAddress, error: `${response.status}: ${errorText}` };
        }
      });

      // –ñ–¥–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const results = await Promise.all(updatePromises);
      
      const successful = results.filter(r => r.success);
      const failed = results.filter(r => !r.success);
      
      if (successful.length === positions.length) {
        console.log('‚úÖ –í—Å–µ —è—á–µ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ OAuth2!');
        return {
          success: true,
          data: { successful, failed },
          message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${successful.length} —è—á–µ–µ–∫ —á–µ—Ä–µ–∑ OAuth2`
        };
      } else {
        console.log(`‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ ${successful.length} –∏–∑ ${positions.length} —è—á–µ–µ–∫`);
        return {
          success: false,
          error: `–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${successful.length} –∏–∑ ${positions.length} —è—á–µ–µ–∫. –û—à–∏–±–∫–∏: ${failed.map(f => f.error).join(', ')}`
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ OAuth2 API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  getManualUpdateInstructions(positions, sheetId) {
    const cellInstructions = [];
    positions.forEach(pos => {
      const cellAddress = this.getCellAddress(pos.row, pos.col);
      const instruction = `${cellAddress}: ${pos.exercise} (–ø–æ–¥—Ö–æ–¥ ${pos.set}) = ${pos.value} –∫–≥`;
      cellInstructions.push(instruction);
    });
    
    return {
      success: true,
      message: `–ù–∞–π–¥–µ–Ω–æ ${positions.length} —è—á–µ–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.`,
      positions: positions,
      cellInstructions: cellInstructions,
      manualUpdate: true,
      sheetUrl: `https://docs.google.com/spreadsheets/d/${sheetId}/edit`
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1, B2)
  getCellAddress(row, col) {
    const colLetter = String.fromCharCode(64 + col); // A=1, B=2, etc.
    return `${colLetter}${row}`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
  formatProgressData(progressData) {
    const rows = [];
    const currentDate = new Date().toLocaleDateString('ru-RU');
    const currentTime = new Date().toLocaleTimeString('ru-RU');
    
    progressData.sets.forEach((set, index) => {
      if (set.completed && set.weight && set.reps) {
        rows.push([
          currentDate,
          currentTime,
          progressData.exercise.name,
          progressData.exercise.group,
          set.setNumber,
          set.weight,
          set.reps,
          '‚úÖ',
          progressData.notes || '',
          progressData.workout.day
        ]);
      }
    });
    
    return rows;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
  async appendProgressData(sheetId, rowData) {
    try {
      console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç –ü—Ä–æ–≥—Ä–µ—Å—Å:', rowData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ü—Ä–æ–≥—Ä–µ—Å—Å
      const progressSheetExists = await this.checkProgressSheetExists(sheetId);
      
      if (!progressSheetExists) {
        throw new Error('–õ–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.');
      }

      // –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Google Forms –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      const writeResult = await this.writeToSheetViaForm(sheetId, rowData);
      
      return {
        success: writeResult.success,
        message: writeResult.message,
        rowsCount: rowData.length,
        data: rowData
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç –ü—Ä–æ–≥—Ä–µ—Å—Å:', error);
      throw error;
    }
  }

  // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google Sheets API
  async writeToSheetViaForm(sheetId, rowData) {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Google Sheets API
      const apiResult = await this.writeToSheetAPI(sheetId, rowData);
      
      if (apiResult.success) {
        return apiResult;
      }
      
      // –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      console.log('üìä API –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É Google Sheets');
      console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å"');
      console.log('3. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã:');
      
      rowData.forEach((row, index) => {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${index + 1}:`, row.join(' | '));
      });
      
      return { 
        success: true, 
        message: `–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏. –î–æ–±–∞–≤—å—Ç–µ ${rowData.length} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã.`,
        instructions: rowData,
        manualEntry: true
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏:', error);
      throw error;
    }
  }

  // –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Google Sheets API
  async writeToSheetAPI(sheetId, rowData) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è OAuth2
      const accessToken = await GoogleOAuthService.getValidToken();
      
      const apiUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/–ü—Ä–æ–≥—Ä–µ—Å—Å!A:J:append?valueInputOption=RAW`;
      
      const requestBody = {
        values: rowData
      };

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets:', result);
        return {
          success: true,
          message: `–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ ${rowData.length} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É`,
          apiResponse: result
        };
      } else {
        console.log('‚ùå API –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å:', response.status, response.statusText);
        return {
          success: false,
          message: `API –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ API –∑–∞–ø–∏—Å–∏:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ API: ${error.message}`
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
  async checkSheetExists(sheetId, sheetName) {
    try {
      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}?access_token=${this.accessToken}`
      );

      if (!response.ok) {
        return false;
      }

      const data = await response.json();
      return data.sheets.some(sheet => sheet.properties.title === sheetName);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Å—Ç–∞:', error);
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å" (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  async createProgressSheet(sheetId) {
    try {
      console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ');
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:');
      console.log('   A: –î–∞—Ç–∞');
      console.log('   B: –í—Ä–µ–º—è');
      console.log('   C: –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
      console.log('   D: –ì—Ä—É–ø–ø–∞ –º—ã—à—Ü');
      console.log('   E: –ü–æ–¥—Ö–æ–¥');
      console.log('   F: –í–µ—Å (–∫–≥)');
      console.log('   G: –ü–æ–≤—Ç–æ—Ä—ã');
      console.log('   H: –°—Ç–∞—Ç—É—Å');
      console.log('   I: –ó–∞–º–µ—Ç–∫–∏');
      console.log('   J: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      return {
        success: true,
        message: '–°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –≤—Ä—É—á–Ω—É—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
        instructions: {
          sheetName: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
          headers: [
            '–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', '–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü', 
            '–ü–æ–¥—Ö–æ–¥', '–í–µ—Å (–∫–≥)', '–ü–æ–≤—Ç–æ—Ä—ã', '–°—Ç–∞—Ç—É—Å', '–ó–∞–º–µ—Ç–∫–∏', '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'
          ]
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
  async addProgressHeaders(sheetId) {
    try {
      console.log('üìã –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å":');
      const headers = [
        '–î–∞—Ç–∞',
        '–í—Ä–µ–º—è', 
        '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
        '–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü',
        '–ü–æ–¥—Ö–æ–¥',
        '–í–µ—Å (–∫–≥)',
        '–ü–æ–≤—Ç–æ—Ä—ã',
        '–°—Ç–∞—Ç—É—Å',
        '–ó–∞–º–µ—Ç–∫–∏',
        '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'
      ];
      
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers.join(' | '));
      
      return {
        success: true,
        message: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É',
        headers
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  async getProgress(sheetUrl) {
    try {
      const sheetId = this.extractSheetId(sheetUrl);
      if (!sheetId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–∞–±–ª–∏—Ü—ã');
      }

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/–ü—Ä–æ–≥—Ä–µ—Å—Å!A:G?access_token=${this.accessToken}`
      );

      if (!response.ok) {
        // –ï—Å–ª–∏ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (response.status === 400) {
          return [];
        }
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
      }

      const data = await response.json();
      const rows = data.values || [];
      
      if (rows.length < 2) return [];

      const headers = rows[0];
      const progressRows = rows.slice(1);

      return progressRows.map(row => ({
        date: row[0] || '',
        day: row[1] || '',
        exercise: row[2] || '',
        set: parseInt(row[3]) || 0,
        weight: row[4] || '',
        completed: row[5] === '‚úÖ',
        notes: row[6] || '',
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      return [];
    }
  }
}

export default new GoogleSheetsService();
