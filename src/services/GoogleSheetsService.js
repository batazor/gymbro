import { MVP_CONFIG } from '../config/AppConfig';

class GoogleSheetsService {
  constructor() {
    this.accessToken = null;
    this.refreshToken = null;
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è MVP)
  async authenticate() {
    try {
      // –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º
      console.log('üìñ MVP —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º');
      this.accessToken = null;
      this.refreshToken = null;
      return true; // –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
  extractSheetId(url) {
    const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    return match ? match[1] : null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
  async getSheetData(sheetUrl, range = 'A1:Z1000') {
    try {
      const sheetId = this.extractSheetId(sheetUrl);
      if (!sheetId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–∞–±–ª–∏—Ü—ã');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSV –¥–∞–Ω–Ω—ã—Ö
      const publicUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&range=${range}`;
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑: ${sheetUrl}`);
      
      const response = await fetch(publicUrl);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const csvText = await response.text();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${csvText.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö`);
      
      // –ü–∞—Ä—Å–∏–º CSV –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
      const lines = csvText.split('\n');
      const data = lines.map(line => {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫)
        return line.split(',').map(cell => cell.trim().replace(/^"|"$/g, ''));
      });

      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
  parseWorkoutPlan(rawData) {
    if (!rawData || rawData.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –í–∏–∫—Ç–æ—Ä–∞
    const workoutPlan = {};
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const headerRow = rawData[0];
    const dayColumns = this.extractDayColumns(headerRow);
    
    // –ü–∞—Ä—Å–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
    dayColumns.forEach(({ dayName, startCol, endCol }) => {
      workoutPlan[dayName] = this.parseExercisesForDay(rawData, startCol, endCol);
    });

    return workoutPlan;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  extractDayColumns(headerRow) {
    const dayColumns = [];
    const dayNames = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    dayNames.forEach(dayName => {
      const dayIndex = headerRow.findIndex(cell => 
        cell && cell.toLowerCase().includes(dayName.toLowerCase())
      );
      
      if (dayIndex !== -1) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        let endCol = dayIndex + 1;
        while (endCol < headerRow.length && 
               (headerRow[endCol] === '' || headerRow[endCol] === undefined)) {
          endCol++;
        }
        
        dayColumns.push({
          dayName: this.normalizeDayName(headerRow[dayIndex]),
          startCol: dayIndex,
          endCol: endCol
        });
      }
    });
    
    return dayColumns;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è
  normalizeDayName(dayText) {
    const dayNames = {
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤—Ç–æ—Ä–Ω–∏–∫': '–í—Ç–æ—Ä–Ω–∏–∫', 
      '—Å—Ä–µ–¥–∞': '–°—Ä–µ–¥–∞',
      '—á–µ—Ç–≤–µ—Ä–≥': '–ß–µ—Ç–≤–µ—Ä–≥',
      '–ø—è—Ç–Ω–∏—Ü–∞': '–ü—è—Ç–Ω–∏—Ü–∞',
      '—Å—É–±–±–æ—Ç–∞': '–°—É–±–±–æ—Ç–∞',
      '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };
    
    const lowerText = dayText.toLowerCase();
    for (const [key, value] of Object.entries(dayNames)) {
      if (lowerText.includes(key)) {
        return value;
      }
    }
    return dayText;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
  parseExercisesForDay(rawData, startCol, endCol) {
    const exercises = [];
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    for (let rowIndex = 1; rowIndex < rawData.length; rowIndex++) {
      const row = rawData[rowIndex];
      if (!row || row.length === 0) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
      const firstCell = row[0] || '';
      if (firstCell.toLowerCase().includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')) {
        const exerciseData = this.parseExerciseRow(row, startCol, endCol, rawData, rowIndex);
        if (exerciseData) {
          exercises.push(exerciseData);
        }
      }
    }
    
    return exercises;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  parseExerciseRow(row, startCol, endCol, allData, rowIndex) {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    const exerciseName = row[startCol] || '';
    if (!exerciseName || exerciseName.toLowerCase().includes('–æ—Ç–¥—ã—Ö–∞–µ–º')) {
      return null;
    }
    
    // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const exerciseData = {
      name: exerciseName.trim(),
      group: '',
      sets: 4, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 –ø–æ–¥—Ö–æ–¥–∞
      reps: '',
      weight: '',
      rest: '',
      specialty: '',
      videoUrl: '',
      comment: '',
      completed: false
    };
    
    // –ò—â–µ–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
    for (let i = rowIndex - 5; i <= rowIndex + 5; i++) {
      if (i >= 0 && i < allData.length) {
        const checkRow = allData[i];
        if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–≥—Ä—É–ø–ø–∞')) {
          exerciseData.group = checkRow[startCol] || '';
          break;
        }
      }
    }
    
    // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–ø–æ–≤—Ç–æ—Ä—ã')) {
        exerciseData.reps = checkRow[startCol] || '';
        break;
      }
    }
    
    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('—Å—Å—ã–ª–∫–∞')) {
        exerciseData.videoUrl = checkRow[startCol] || '';
        break;
      }
    }
    
    // –ò—â–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å')) {
        exerciseData.specialty = checkRow[startCol] || '';
        break;
      }
    }
    
    return exerciseData;
  }

  // –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è MVP)
  async writeProgress(sheetUrl, progressData) {
    try {
      // –î–ª—è MVP –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
      console.log('üìñ MVP —Ä–µ–∂–∏–º: –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ):', progressData);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return { 
        success: true, 
        message: '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (MVP —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)' 
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
  async checkSheetExists(sheetId, sheetName) {
    try {
      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}?access_token=${this.accessToken}`
      );

      if (!response.ok) {
        return false;
      }

      const data = await response.json();
      return data.sheets.some(sheet => sheet.properties.title === sheetName);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Å—Ç–∞:', error);
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å"
  async createProgressSheet(sheetId) {
    try {
      const body = {
        requests: [{
          addSheet: {
            properties: {
              title: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
              gridProperties: {
                rowCount: 1000,
                columnCount: 7
              }
            }
          }
        }]
      };

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}:batchUpdate?access_token=${this.accessToken}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(body),
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: ${response.status}`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await this.addProgressHeaders(sheetId);
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å"
  async addProgressHeaders(sheetId) {
    try {
      const headers = [
        '–î–∞—Ç–∞',
        '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 
        '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
        '–ü–æ–¥—Ö–æ–¥',
        '–í–µ—Å (–∫–≥)',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
      ];

      const body = {
        values: [headers]
      };

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/–ü—Ä–æ–≥—Ä–µ—Å—Å!A1:G1?valueInputOption=RAW&access_token=${this.accessToken}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(body),
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  async getProgress(sheetUrl) {
    try {
      const sheetId = this.extractSheetId(sheetUrl);
      if (!sheetId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–∞–±–ª–∏—Ü—ã');
      }

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/–ü—Ä–æ–≥—Ä–µ—Å—Å!A:G?access_token=${this.accessToken}`
      );

      if (!response.ok) {
        // –ï—Å–ª–∏ –ª–∏—Å—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (response.status === 400) {
          return [];
        }
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
      }

      const data = await response.json();
      const rows = data.values || [];
      
      if (rows.length < 2) return [];

      const headers = rows[0];
      const progressRows = rows.slice(1);

      return progressRows.map(row => ({
        date: row[0] || '',
        day: row[1] || '',
        exercise: row[2] || '',
        set: parseInt(row[3]) || 0,
        weight: row[4] || '',
        completed: row[5] === '‚úÖ',
        notes: row[6] || '',
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      return [];
    }
  }
}

export default new GoogleSheetsService();
