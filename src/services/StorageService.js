import AsyncStorage from '@react-native-async-storage/async-storage';

class StorageService {
  constructor() {
    this.SHEET_URL_KEY = 'gymbro_sheet_url';
    this.OAUTH_TOKEN_KEY = 'gymbro_oauth_token';
    this.OAUTH_REFRESH_TOKEN_KEY = 'gymbro_oauth_refresh_token';
    this.OAUTH_TOKEN_EXPIRY_KEY = 'gymbro_oauth_token_expiry';
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
  async saveSheetUrl(url) {
    try {
      await AsyncStorage.setItem(this.SHEET_URL_KEY, url);
      console.log('‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', url);
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
  async getSheetUrl() {
    try {
      const url = await AsyncStorage.getItem(this.SHEET_URL_KEY);
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', url);
      return { success: true, url };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', error);
      return { success: false, error: error.message };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞
  async saveOAuthToken(tokenData) {
    try {
      await AsyncStorage.setItem(this.OAUTH_TOKEN_KEY, tokenData.access_token);
      await AsyncStorage.setItem(this.OAUTH_REFRESH_TOKEN_KEY, tokenData.refresh_token);
      await AsyncStorage.setItem(this.OAUTH_TOKEN_EXPIRY_KEY, tokenData.expires_in.toString());
      console.log('‚úÖ OAuth —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞
  async getOAuthToken() {
    try {
      const accessToken = await AsyncStorage.getItem(this.OAUTH_TOKEN_KEY);
      const refreshToken = await AsyncStorage.getItem(this.OAUTH_REFRESH_TOKEN_KEY);
      const expiresIn = await AsyncStorage.getItem(this.OAUTH_TOKEN_EXPIRY_KEY);
      
      if (accessToken && refreshToken && expiresIn) {
        return {
          success: true,
          token: {
            access_token: accessToken,
            refresh_token: refreshToken,
            expires_in: parseInt(expiresIn)
          }
        };
      }
      
      return { success: false, error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞
  async clearOAuthToken() {
    try {
      await AsyncStorage.removeItem(this.OAUTH_TOKEN_KEY);
      await AsyncStorage.removeItem(this.OAUTH_REFRESH_TOKEN_KEY);
      await AsyncStorage.removeItem(this.OAUTH_TOKEN_EXPIRY_KEY);
      console.log('‚úÖ OAuth —Ç–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ OAuth —Ç–æ–∫–µ–Ω–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
  async hasSheetUrl() {
    try {
      const url = await AsyncStorage.getItem(this.SHEET_URL_KEY);
      return url !== null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OAuth —Ç–æ–∫–µ–Ω–∞
  async hasOAuthToken() {
    try {
      const accessToken = await AsyncStorage.getItem(this.OAUTH_TOKEN_KEY);
      return accessToken !== null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OAuth —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async getAllData() {
    try {
      const sheetUrl = await AsyncStorage.getItem(this.SHEET_URL_KEY);
      const accessToken = await AsyncStorage.getItem(this.OAUTH_TOKEN_KEY);
      const refreshToken = await AsyncStorage.getItem(this.OAUTH_REFRESH_TOKEN_KEY);
      const expiresIn = await AsyncStorage.getItem(this.OAUTH_TOKEN_EXPIRY_KEY);
      
      return {
        success: true,
        data: {
          sheetUrl,
          oauthToken: accessToken ? {
            access_token: accessToken,
            refresh_token: refreshToken,
            expires_in: expiresIn ? parseInt(expiresIn) : null
          } : null
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  async clearAllData() {
    try {
      await AsyncStorage.removeItem(this.SHEET_URL_KEY);
      await AsyncStorage.removeItem(this.OAUTH_TOKEN_KEY);
      await AsyncStorage.removeItem(this.OAUTH_REFRESH_TOKEN_KEY);
      await AsyncStorage.removeItem(this.OAUTH_TOKEN_EXPIRY_KEY);
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return { success: false, error: error.message };
    }
  }
}

export default new StorageService();
