import * as AuthSession from 'expo-auth-session';
import * as Crypto from 'expo-crypto';
import * as WebBrowser from 'expo-web-browser';
import { Platform } from 'react-native';
import StorageService from './StorageService';

// –ó–∞–≤–µ—Ä—à–∞–µ–º auth session –¥–ª—è WebBrowser
WebBrowser.maybeCompleteAuthSession();

class GoogleOAuthService {
  constructor() {
    this.accessToken = null;
    this.refreshToken = null;
    this.tokenExpiry = null;
    
    // OAuth2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Google
    // ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ Google OAuth credentials
    // –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å: https://console.cloud.google.com/apis/credentials
    this.clientId = 'YOUR_CLIENT_ID_HERE.apps.googleusercontent.com';
    this.clientSecret = 'YOUR_CLIENT_SECRET_HERE';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π redirect URI –¥–ª—è Expo
    this.redirectUri = 'https://auth.expo.io/@batazor/gymbro';
    
    this.scopes = [
      'https://www.googleapis.com/auth/spreadsheets',
      'https://www.googleapis.com/auth/drive.readonly'
    ];

    // Discovery document –¥–ª—è Google OAuth2
    this.discovery = {
      authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',
      tokenEndpoint: 'https://oauth2.googleapis.com/token',
      revocationEndpoint: 'https://oauth2.googleapis.com/revoke',
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  createAuthRequest() {
    return {
      clientId: this.clientId,
      scopes: this.scopes,
      redirectUri: this.redirectUri,
      responseType: AuthSession.ResponseType.Code,
      extraParams: {
        access_type: 'offline',
        prompt: 'consent'
      }
    };
  }

  // –û–±–º–µ–Ω –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω
  async exchangeCodeForToken(authCode) {
    try {
      const tokenUrl = 'https://oauth2.googleapis.com/token';
      
      const response = await fetch(tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          client_id: this.clientId,
          client_secret: this.clientSecret,
          code: authCode,
          grant_type: 'authorization_code',
          redirect_uri: this.redirectUri,
        }),
      });

      if (response.ok) {
        const tokenData = await response.json();
        
        this.accessToken = tokenData.access_token;
        this.refreshToken = tokenData.refresh_token;
        this.tokenExpiry = Date.now() + (tokenData.expires_in * 1000);
        
        console.log('‚úÖ OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, token: tokenData };
      } else {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error === 'access_denied') {
            return { 
              success: false, 
              error: 'access_denied',
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
              errorData 
            };
          }
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          if (errorData.error === 'access_denied' && errorText.includes('verification')) {
            return { 
              success: false, 
              error: 'verification_required',
              message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Google. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.',
              errorData,
              needsVerification: true
            };
          }
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        }
        
        return { success: false, error: errorText };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  isTokenValid() {
    if (!this.accessToken || !this.tokenExpiry) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (—Å –∑–∞–ø–∞—Å–æ–º –≤ 5 –º–∏–Ω—É—Ç)
    return Date.now() < (this.tokenExpiry - 5 * 60 * 1000);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshAccessToken() {
    if (!this.refreshToken) {
      throw new Error('–ù–µ—Ç refresh token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    try {
      const tokenUrl = 'https://oauth2.googleapis.com/token';
      
      const response = await fetch(tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          client_id: this.clientId,
          client_secret: this.clientSecret,
          refresh_token: this.refreshToken,
          grant_type: 'refresh_token',
        }),
      });

      if (response.ok) {
        const tokenData = await response.json();
        
        this.accessToken = tokenData.access_token;
        this.tokenExpiry = Date.now() + (tokenData.expires_in * 1000);
        
        console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, token: tokenData };
      } else {
        const error = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return { success: false, error };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
  async getValidToken() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏
    if (this.isTokenValid()) {
      return this.accessToken;
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if (!this.accessToken || !this.refreshToken) {
      const savedToken = await StorageService.getOAuthToken();
      if (savedToken.success && savedToken.token) {
        this.accessToken = savedToken.token.access_token;
        this.refreshToken = savedToken.token.refresh_token;
        this.tokenExpiry = Date.now() + (savedToken.token.expires_in * 1000);
        
        if (this.isTokenValid()) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
          return this.accessToken;
        }
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å refresh token, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (this.refreshToken) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...');
      const refreshResult = await this.refreshAccessToken();
      if (refreshResult.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        await StorageService.saveOAuthToken({
          access_token: this.accessToken,
          refresh_token: this.refreshToken,
          expires_in: Math.floor((this.tokenExpiry - Date.now()) / 1000)
        });
        return this.accessToken;
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
  async authenticate() {
    try {
      console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (Platform.OS === 'web') {
        const authCode = localStorage.getItem('google_auth_code');
        const authTimestamp = localStorage.getItem('google_auth_timestamp');
        
        if (authCode && authTimestamp) {
          const timestamp = parseInt(authTimestamp);
          const now = Date.now();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
          if (now - timestamp < 5 * 60 * 1000) {
            console.log('üîÑ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ localStorage');
            
            // –û—á–∏—â–∞–µ–º localStorage
            localStorage.removeItem('google_auth_code');
            localStorage.removeItem('google_auth_timestamp');
            
            // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
            const tokenResult = await this.exchangeCodeForToken(authCode);
            
            if (tokenResult.success) {
              await StorageService.saveOAuthToken(tokenResult.token);
              console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
              return { success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' };
            } else {
              return {
                success: false,
                error: tokenResult.error,
                message: tokenResult.message,
                needsVerification: tokenResult.needsVerification
              };
            }
          } else {
            // –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º localStorage
            localStorage.removeItem('google_auth_code');
            localStorage.removeItem('google_auth_timestamp');
          }
        }
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
      try {
        const validToken = await this.getValidToken();
        if (validToken) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
          return { success: true, message: '–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' };
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω:', error.message);
      }
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π OAuth flow
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π OAuth flow...');
      
      // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π redirect URI
      let redirectUri;
      if (Platform.OS === 'web') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        redirectUri = `${window.location.origin}/oauth-callback`;
      } else {
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Expo URI
        redirectUri = this.redirectUri;
      }
      
      const authUrl = `${this.discovery.authorizationEndpoint}?` +
        `client_id=${this.clientId}&` +
        `redirect_uri=${encodeURIComponent(redirectUri)}&` +
        `response_type=code&` +
        `scope=${encodeURIComponent(this.scopes.join(' '))}&` +
        `access_type=offline&` +
        `prompt=consent`;
      
      console.log('üîó URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authUrl);
      console.log('üîó Redirect URI:', redirectUri);
      console.log('üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', Platform.OS);
      
      // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
      if (Platform.OS === 'web') {
        return await this.authenticateWeb(authUrl, redirectUri);
      }
      
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º WebBrowser
      const result = await WebBrowser.openAuthSessionAsync(authUrl, redirectUri);
      
      console.log('üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result);
      
      if (result.type === 'success' && result.url) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL
        const url = new URL(result.url);
        const authCode = url.searchParams.get('code');
        
        if (authCode) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          
          // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
          const tokenResult = await this.exchangeCodeForToken(authCode);
          
          if (tokenResult.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            await StorageService.saveOAuthToken(tokenResult.token);
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return { success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' };
          } else {
            // –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
            return {
              success: false,
              error: tokenResult.error,
              message: tokenResult.message,
              needsVerification: tokenResult.needsVerification
            };
          }
        } else {
          return { 
            success: false, 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            error: 'no_auth_code'
          };
        }
      } else if (result.type === 'cancel' || result.type === 'dismiss') {
        return { 
          success: false, 
          message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
          error: 'access_denied'
        };
      } else {
        return { 
          success: false, 
          message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          error: 'unknown_error'
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–±–µ–∑ window.closed)
  async authenticateWeb(authUrl, redirectUri) {
    try {
      console.log('üåê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...');
      
      // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º redirect –≤–º–µ—Å—Ç–æ popup
      // –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å CORS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
      return new Promise((resolve) => {
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—É—é iframe –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = authUrl;
        document.body.appendChild(iframe);
        
        // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç iframe
        const messageHandler = (event) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º origin –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          if (event.origin !== 'https://accounts.google.com' && 
              event.origin !== window.location.origin) {
            return;
          }
          
          if (event.data && event.data.type === 'GOOGLE_AUTH_SUCCESS' && event.data.code) {
            window.removeEventListener('message', messageHandler);
            document.body.removeChild(iframe);
            
            // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
            this.exchangeCodeForToken(event.data.code).then(tokenResult => {
              if (tokenResult.success) {
                StorageService.saveOAuthToken(tokenResult.token).then(() => {
                  resolve({ success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });
                });
              } else {
                resolve({
                  success: false,
                  error: tokenResult.error,
                  message: tokenResult.message,
                  needsVerification: tokenResult.needsVerification
                });
              }
            });
          } else if (event.data && event.data.type === 'GOOGLE_AUTH_ERROR') {
            window.removeEventListener('message', messageHandler);
            document.body.removeChild(iframe);
            resolve({
              success: false,
              message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
              error: 'auth_error'
            });
          }
        };
        
        window.addEventListener('message', messageHandler);
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º window.location –¥–ª—è redirect
        setTimeout(() => {
          window.removeEventListener('message', messageHandler);
          if (document.body.contains(iframe)) {
            document.body.removeChild(iframe);
          }
          
          // –ï—Å–ª–∏ iframe –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π redirect
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π redirect –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
          window.location.href = authUrl;
          
          resolve({
            success: false,
            message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            error: 'redirect_required',
            authUrl: authUrl
          });
        }, 2000); // –î–∞–µ–º iframe 2 —Å–µ–∫—É–Ω–¥—ã
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  async handleAuthCode(authCode) {
    try {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      const tokenResult = await this.exchangeCodeForToken(authCode);
      
      if (tokenResult.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await StorageService.saveOAuthToken(tokenResult.token);
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        return { success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' };
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        return {
          success: false,
          error: tokenResult.error,
          message: tokenResult.message,
          needsVerification: tokenResult.needsVerification,
          errorData: tokenResult.errorData
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout() {
    this.accessToken = null;
    this.refreshToken = null;
    this.tokenExpiry = null;
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await StorageService.clearOAuthToken();
    
    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated() {
    return this.accessToken !== null;
  }
}

export default new GoogleOAuthService();