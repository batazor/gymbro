/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */

import { WorkoutPlan, Exercise, Workout, ValidationUtils } from '../utils/WorkoutUtils.js';

// URL —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const REAL_SHEET_URL = 'https://docs.google.com/spreadsheets/d/1CJCkWz67TjV4NaFWXeDZZfFPUvpblxtB6c49Eg6FYRU/edit';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function fetchRealSheetData() {
  const sheetId = REAL_SHEET_URL.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/)?.[1];
  if (!sheetId) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–∞–±–ª–∏—Ü—ã');
  }
  
  const publicUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&range=A1:Z100`;
  const response = await fetch(publicUrl);
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  const csvText = await response.text();
  const lines = csvText.split('\n');
  return lines.map(line => {
    return line.split(',').map(cell => cell.trim().replace(/^"|"$/g, ''));
  });
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestWorkoutParser {
  extractDayColumns(headerRow) {
    const dayColumns = [];
    const dayNames = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    dayNames.forEach(dayName => {
      const dayIndex = headerRow.findIndex(cell => 
        cell && cell.toLowerCase().includes(dayName.toLowerCase())
      );
      
      if (dayIndex !== -1) {
        let endCol = dayIndex + 1;
        while (endCol < headerRow.length && 
               (headerRow[endCol] === '' || headerRow[endCol] === undefined)) {
          endCol++;
        }
        
        dayColumns.push({
          dayName: this.normalizeDayName(headerRow[dayIndex]),
          startCol: dayIndex,
          endCol: endCol
        });
      }
    });
    
    return dayColumns;
  }

  normalizeDayName(dayText) {
    const dayNames = {
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤—Ç–æ—Ä–Ω–∏–∫': '–í—Ç–æ—Ä–Ω–∏–∫', 
      '—Å—Ä–µ–¥–∞': '–°—Ä–µ–¥–∞',
      '—á–µ—Ç–≤–µ—Ä–≥': '–ß–µ—Ç–≤–µ—Ä–≥',
      '–ø—è—Ç–Ω–∏—Ü–∞': '–ü—è—Ç–Ω–∏—Ü–∞',
      '—Å—É–±–±–æ—Ç–∞': '–°—É–±–±–æ—Ç–∞',
      '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };
    
    const lowerText = dayText.toLowerCase();
    for (const [key, value] of Object.entries(dayNames)) {
      if (lowerText.includes(key)) {
        return value;
      }
    }
    return dayText;
  }

  parseExercisesForDay(rawData, startCol, endCol) {
    const exercises = [];
    
    for (let rowIndex = 1; rowIndex < rawData.length; rowIndex++) {
      const row = rawData[rowIndex];
      if (!row || row.length === 0) continue;
      
      const firstCell = row[0] || '';
      if (firstCell.toLowerCase().includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')) {
        const exerciseData = this.parseExerciseRow(row, startCol, endCol, rawData, rowIndex);
        if (exerciseData) {
          exercises.push(exerciseData);
        }
      }
    }
    
    return exercises;
  }

  parseExerciseRow(row, startCol, endCol, allData, rowIndex) {
    const exerciseName = row[startCol] || '';
    if (!exerciseName || exerciseName.toLowerCase().includes('–æ—Ç–¥—ã—Ö–∞–µ–º')) {
      return null;
    }
    
    const exerciseData = {
      name: exerciseName.trim(),
      group: '',
      sets: 4,
      reps: '',
      weight: '',
      rest: '',
      specialty: '',
      videoUrl: '',
      comment: '',
      completed: false
    };
    
    // –ò—â–µ–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
    for (let i = rowIndex - 5; i <= rowIndex + 5; i++) {
      if (i >= 0 && i < allData.length) {
        const checkRow = allData[i];
        if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–≥—Ä—É–ø–ø–∞')) {
          exerciseData.group = checkRow[startCol] || '';
          break;
        }
      }
    }
    
    // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    for (let i = rowIndex; i < Math.min(rowIndex + 10, allData.length); i++) {
      const checkRow = allData[i];
      if (checkRow && checkRow[0] && checkRow[0].toLowerCase().includes('–ø–æ–≤—Ç–æ—Ä—ã')) {
        exerciseData.reps = checkRow[startCol] || '';
        break;
      }
    }
    
    return exerciseData;
  }

  parseWorkoutPlan(rawData) {
    if (!rawData || rawData.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }

    const workoutPlan = {};
    const headerRow = rawData[0];
    const dayColumns = this.extractDayColumns(headerRow);
    
    dayColumns.forEach(({ dayName, startCol, endCol }) => {
      workoutPlan[dayName] = this.parseExercisesForDay(rawData, startCol, endCol);
    });

    return workoutPlan;
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
class WorkoutParserTests {
  constructor() {
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
    this.realData = null;
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
  addTest(name, testFunction) {
    this.tests.push({ name, testFunction });
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  async runAll() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
      this.realData = await fetchRealSheetData();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${this.realData.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö\n`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã');
      return false;
    }
    
    for (const test of this.tests) {
      try {
        await test.testFunction();
        console.log(`‚úÖ ${test.name}`);
        this.passed++;
      } catch (error) {
        console.log(`‚ùå ${test.name}: ${error.message}`);
        this.failed++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.passed} –ø—Ä–æ—à–ª–∏, ${this.failed} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å`);
    return this.failed === 0;
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
  assertEqual(actual, expected, message) {
    if (actual !== expected) {
      throw new Error(`${message}. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${actual}`);
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏
  assertTrue(condition, message) {
    if (!condition) {
      throw new Error(`${message}. –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
  assertContains(array, element, message) {
    if (!array.includes(element)) {
      throw new Error(`${message}. –≠–ª–µ–º–µ–Ω—Ç ${element} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ`);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤
const testRunner = new WorkoutParserTests();

// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
testRunner.addTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã', () => {
  testRunner.assertTrue(testRunner.realData && testRunner.realData.length > 0, '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã');
  testRunner.assertTrue(testRunner.realData.length >= 10, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
});

// –¢–µ—Å—Ç 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
testRunner.addTest('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏', () => {
  const parser = new TestWorkoutParser();
  const headerRow = testRunner.realData[0];
  const dayColumns = parser.extractDayColumns(headerRow);
  
  testRunner.assertTrue(dayColumns.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–Ω–µ–π');
  
  const dayNames = dayColumns.map(dc => dc.dayName);
  testRunner.assertContains(dayNames, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫');
  testRunner.assertContains(dayNames, '–°—Ä–µ–¥–∞', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –°—Ä–µ–¥–∞');
  testRunner.assertContains(dayNames, '–ü—è—Ç–Ω–∏—Ü–∞', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –ü—è—Ç–Ω–∏—Ü–∞');
});

// –¢–µ—Å—Ç 3: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π
testRunner.addTest('–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π', () => {
  const parser = new TestWorkoutParser();
  testRunner.assertEqual(
    parser.normalizeDayName('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ì–†–£–î–¨ –ò –ë–ò–¶–ï–ü–°'),
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞'
  );
  
  testRunner.assertEqual(
    parser.normalizeDayName('–°—Ä–µ–¥–∞ –°–ü–ò–ù–ê –ò –¢–†–ò–¶–ï–ü–°'),
    '–°—Ä–µ–¥–∞',
    '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥—ã'
  );
  
  testRunner.assertEqual(
    parser.normalizeDayName('–ü—è—Ç–Ω–∏—Ü–∞ –ü–õ–ï–ß–ò –ò –ù–û–ì–ò'),
    '–ü—è—Ç–Ω–∏—Ü–∞',
    '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—è—Ç–Ω–∏—Ü—ã'
  );
});

// –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
testRunner.addTest('–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', () => {
  const parser = new TestWorkoutParser();
  const workoutPlan = parser.parseWorkoutPlan(testRunner.realData);
  
  testRunner.assertTrue(
    Object.keys(workoutPlan).length > 0,
    '–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –¥–Ω—è–º
  testRunner.assertTrue(
    workoutPlan['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'] && workoutPlan['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'].length > 0,
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
  );
  
  testRunner.assertTrue(
    workoutPlan['–°—Ä–µ–¥–∞'] && workoutPlan['–°—Ä–µ–¥–∞'].length > 0,
    '–°—Ä–µ–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
  );
  
  testRunner.assertTrue(
    workoutPlan['–ü—è—Ç–Ω–∏—Ü–∞'] && workoutPlan['–ü—è—Ç–Ω–∏—Ü–∞'].length > 0,
    '–ü—è—Ç–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
  );
});

// –¢–µ—Å—Ç 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
testRunner.addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', () => {
  const parser = new TestWorkoutParser();
  const workoutPlan = parser.parseWorkoutPlan(testRunner.realData);
  
  const mondayExercises = workoutPlan['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'];
  testRunner.assertTrue(mondayExercises.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫');
  
  const firstExercise = mondayExercises[0];
  testRunner.assertTrue(
    firstExercise.name && firstExercise.name.length > 0,
    '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'
  );
  
  testRunner.assertTrue(
    firstExercise.group && firstExercise.group.length > 0,
    '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≥—Ä—É–ø–ø—É –º—ã—à—Ü'
  );
  
  testRunner.assertTrue(
    firstExercise.reps && firstExercise.reps.length > 0,
    '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø–æ–≤—Ç–æ—Ä—ã'
  );
});

// –¢–µ—Å—Ç 6: –ö–ª–∞—Å—Å Exercise
testRunner.addTest('–ö–ª–∞—Å—Å Exercise', () => {
  const exerciseData = {
    name: '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞',
    group: '–ì—Ä—É–¥–Ω—ã–µ –º—ã—à—Ü—ã',
    sets: 4,
    reps: '6,6,6,6',
    weight: '',
    rest: '',
    specialty: '–û–±—ã—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
    videoUrl: '',
    comment: '',
    completed: false
  };
  
  const exercise = new Exercise(exerciseData);
  
  testRunner.assertEqual(exercise.name, '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
  testRunner.assertEqual(exercise.group, '–ì—Ä—É–¥–Ω—ã–µ –º—ã—à—Ü—ã', '–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü');
  testRunner.assertEqual(exercise.getSetsCount(), 4, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤');
  testRunner.assertTrue(!exercise.isRest(), '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–¥—ã—Ö–æ–º');
});

// –¢–µ—Å—Ç 7: –ö–ª–∞—Å—Å Workout
testRunner.addTest('–ö–ª–∞—Å—Å Workout', () => {
  const exercises = [
    { name: '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞', group: '–ì—Ä—É–¥–Ω—ã–µ –º—ã—à—Ü—ã', sets: 4, reps: '6', completed: false },
    { name: '–û—Ç–¥—ã—Ö–∞–µ–º!', group: '–û—Ç–¥—ã—Ö', sets: 0, reps: '', completed: false }
  ];
  
  const workout = new Workout('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', exercises);
  
  testRunner.assertEqual(workout.dayName, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è');
  testRunner.assertEqual(workout.exercises.length, 2, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
  testRunner.assertEqual(workout.getActiveExercises().length, 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
  testRunner.assertEqual(workout.getProgress(), 0, '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0%');
});

// –¢–µ—Å—Ç 8: –ö–ª–∞—Å—Å WorkoutPlan
testRunner.addTest('–ö–ª–∞—Å—Å WorkoutPlan', () => {
  const parser = new TestWorkoutParser();
  const planData = parser.parseWorkoutPlan(testRunner.realData);
  const plan = new WorkoutPlan(planData);
  
  testRunner.assertTrue(plan.getWorkoutByDay('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'), '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞');
  testRunner.assertTrue(plan.getWorkoutByDay('–°—Ä–µ–¥–∞'), '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—ã');
  
  const stats = plan.getStats();
  testRunner.assertTrue(stats.totalWorkouts > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
  testRunner.assertTrue(stats.totalExercises > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
});

// –¢–µ—Å—Ç 9: –í–∞–ª–∏–¥–∞—Ü–∏—è URL
testRunner.addTest('–í–∞–ª–∏–¥–∞—Ü–∏—è URL Google Sheets', () => {
  testRunner.assertTrue(
    ValidationUtils.isValidGoogleSheetsUrl(REAL_SHEET_URL),
    '–†–µ–∞–ª—å–Ω—ã–π URL –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'
  );
  
  const invalidUrl = 'https://example.com/sheet';
  testRunner.assertTrue(
    !ValidationUtils.isValidGoogleSheetsUrl(invalidUrl),
    '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'
  );
});

// –¢–µ—Å—Ç 10: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
testRunner.addTest('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞', () => {
  const parser = new TestWorkoutParser();
  const workoutPlan = parser.parseWorkoutPlan(testRunner.realData);
  const plan = new WorkoutPlan(workoutPlan);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  testRunner.assertTrue(plan, '–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = plan.getStats();
  testRunner.assertTrue(stats.totalWorkouts > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
  testRunner.assertTrue(stats.totalExercises > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const mondayWorkout = plan.getWorkoutByDay('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫');
  testRunner.assertTrue(mondayWorkout, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
  
  const activeExercises = mondayWorkout.getActiveExercises();
  testRunner.assertTrue(activeExercises.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
  const firstExercise = activeExercises[0];
  testRunner.assertTrue(firstExercise.name.length > 0, '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ');
  testRunner.assertTrue(firstExercise.group.length > 0, '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≥—Ä—É–ø–ø—É');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export { testRunner, REAL_SHEET_URL };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
export const runTests = async () => {
  return await testRunner.runAll();
};